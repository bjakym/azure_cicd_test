name: 'Azure Terraform Self-hosted'

on:
  workflow_dispatch:

# on: [push, pull_request]

  # push:
  #   branches:
  #     # Push events our default branch
  #     - main
  #     # Push events to branches matching refs/heads/renovate/...
  #     - 'renovate/**'

  # pull_request:
  #   paths-ignore:
  #     - '*.md'

env:
  TF_LOG: INFO

jobs:
  get_tf_folders:
    name: 'Get Terraform folders'
    runs-on: azure-cicd

    defaults:
      run:
        shell: bash

    outputs:
      directories: ${{ steps.tfdirsjson.outputs.directories }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get Terraform Folders
      id: tfdirs
      uses: tj-actions/changed-files@v41
      with:
        files: |
            **.tf
        dir_names: true

    - name: Convert Folder List to Json
      id: tfdirsjson
      continue-on-error: false
      run: |
        folders_json="["
        for dir in ${{ steps.tfdirs.outputs.all_changed_files }}; do
          folders_json+="\"${dir}\","
        done
        folders_json="${folders_json%,}]"
        echo "directories=${folders_json}"
        echo "directories=${folders_json}" >> $GITHUB_OUTPUT

  terraform:
    name: 'Run Terraform Par'
    needs: get_tf_folders
    runs-on: azure-cicd

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        tf_folder: ${{ fromJSON(needs.get_tf_folders.outputs.directories) }}
 
    steps:

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{ matrix.tf_folder }}
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

    # Run a terraform validate to check the syntax and configuration based on the core syntax of Terraform code
    - name: Terraform Validate
      working-directory: ${{ matrix.tf_folder }}
      id: validate
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform validate -no-color
        echo "result=$(terraform validate -no-color)" >> $GITHUB_OUTPUT

    # Run a terraform plan for pull requests only
    - name: Terraform Plan
      working-directory: ${{ matrix.tf_folder }}
      id: plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -no-color
        echo 'result<<EOF' >> $GITHUB_OUTPUT
        terraform plan -no-color >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    # Add a comment to pull requests with plan results
    - name: Add Plan Comment
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.result }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`
          ${{ steps.plan.outputs.result }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.tf_folder }}\`, Workflow: \`${{ github.workflow }}\`*
          `;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      working-directory: ${{ matrix.tf_folder }}
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform apply -auto-approve