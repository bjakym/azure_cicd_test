name: populate_matrix_from_json

on: [push, pull_request]

jobs:
  terraform_prepare:
    runs-on: ubuntu-latest

    outputs:
      environments: ${{ steps.environments.outputs.environments }}

    steps:
    - name: Setup
      id: setup
      env:
        CONFIG: >-
          [
            {
                "tf_folders": [
                    "projects/EU1/Inventory/201-groups",
                    "projects/EU1/eu1-t0-dr-shared-002/104-gw-dfw"
                ]
            },
            {
                "tf_folders": [
                    "projects/EU1/eu1-t0-dr-shared-002/customers/eu1-t1-dr-002-394/101-dres",
                    "projects/EU1/eu1-t0-dr-shared-002/customers/eu1-t1-dr-002-395/101-dres"
                ]
            }
          ]
      run: echo "matrix=$(jq -r -c . <<< "$CONFIG")" >> $GITHUB_OUTPUT

    - name: Build Environments Array
      id: environments
      run: |
        myArray=()
        myArray+=("env1")
        myArray+=("env2")
        myArray+=("env3")
        myArray=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${myArray[@]}")
        echo "Updated environments list: $myArray"
        echo "environments=$myArray" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Check
      run: jq . <<< '${{ steps.setup.outputs.matrix }}'

  terraform:
    needs: [terraform_prepare]
    strategy:
      matrix:
        # tf_resources: ${{ fromJSON(needs.terraform_prepare.outputs.matrix) }}
        environment: ${{ fromJSON(needs.terraform_prepare.outputs.environments) }}
      fail-fast: true
      max-parallel: 1
    # environment:
    #   name: ${{ matrix.environment }}
    uses: ./.github/workflows/terraform-flow.yml
    with:
      folder: ${{ matrix.environment }}

  # step2:
  #   needs: step1

  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix: 
  #       include: ${{ fromJSON(needs.step1.outputs.matrix) }}

  #   steps:
  #   - name: Check
  #     env:
  #       MATRIX: ${{ toJSON(matrix) }}
  #       # PROJECT: ${{ fromJSON(toJSON(matrix)).project }}
  #       # CONFIG: ${{ fromJSON(toJSON(matrix)).config }}
  #       # NESTED: ${{ join(fromJSON(toJSON(matrix)).nested.*.val, ', ') }}
  #     run: |
  #       echo "MATRIX: $(jq -r -c '.' <<< "$MATRIX")"
  #       # echo "PROJECT: [$PROJECT]"
  #       # echo "CONFIG: [$CONFIG]"
  #       # echo "NESTED: [$NESTED]"