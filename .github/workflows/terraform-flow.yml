name: 'Terraform Flow'

on:
  workflow_call:
    inputs:
      folders_string:
        required: true
        type: string

defaults:
  run:
    shell: bash

env:
  TF_LOG: INFO

jobs:
  prepare_matrix:
    name: 'Prepare Matrix'
    runs-on: azure-cicd
    outputs:
      dirs: ${{ steps.set_matrix.outputs.dirs }}
    steps:
      # Set matrix of jobs to run Terraform in parallel for every folder in matrix
      - name: Set matrix for ${{ inputs.folders_string }}
        id: set_matrix
        run: |
          matrix_arr=(${{ inputs.folders_string }})
          matrix_arr_json="["
          for dir in ${matrix_arr[@]}; do
            matrix_arr_json+="\"${dir}\","
          done
          matrix_arr_json="${matrix_arr_json%,}]"
          echo "dirs=${matrix_arr_json}"
          echo "dirs=${matrix_arr_json}" >> $GITHUB_OUTPUT

  deploy:
    name: 'Run Terraform'
    needs: [prepare_matrix]
    runs-on: azure-cicd

    strategy:
      matrix:
        tf_folder: ${{ fromJSON(needs.prepare_matrix.outputs.dirs) }}

    steps:
      # - name: Init in ${{ matrix.tf_folder }}
      #   run: |
      #     echo "Init in ${{ matrix.tf_folder }}"

      # - name: Validate in ${{ matrix.tf_folder }}
      #   run: |
      #     echo "Validate in ${{ matrix.tf_folder }}"

      # Print secrets
      - name: Print Values
        working-directory: ${{ matrix.tf_folder }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          pwd
          ls -lrt
          echo terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ matrix.tf_folder }}
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

      # Run a terraform validate to check the syntax and configuration based on the core syntax of Terraform code
      - name: Terraform Validate
        working-directory: ${{ matrix.tf_folder }}
        id: validate
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          terraform validate -no-color
          echo "result=$(terraform validate -no-color)" >> $GITHUB_OUTPUT

      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        working-directory: ${{ matrix.tf_folder }}
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color
          echo 'result<<EOF' >> $GITHUB_OUTPUT
          terraform plan -no-color >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # Add a comment to pull requests with plan results
      - name: Add Plan Comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.result }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            ${{ steps.plan.outputs.result }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.tf_folder }}\`, Workflow: \`${{ github.workflow }}\`*
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        working-directory: ${{ matrix.tf_folder }}
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve